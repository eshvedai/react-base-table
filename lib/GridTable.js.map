{"version":3,"sources":["../src/GridTable.js"],"names":["GridTable","props","_setHeaderRef","bind","_setBodyRef","_setInnerRef","_itemKey","_getBodyWidth","_handleItemsRendered","_resetColumnWidthCache","bodyWidth","estimatedRowHeight","bodyRef","resetAfterColumnIndex","_getEstimatedTotalRowsHeight","getEstimatedTotalRowsHeight","renderRow","rowIndex","shouldForceUpdate","resetAfterRowIndex","headerRef","forceUpdate","args","scrollTo","scrollLeft","scrollTop","scrollToPosition","align","scrollToItem","data","rowHeight","innerRef","clientHeight","length","columns","rowRenderer","rowData","containerStyle","classPrefix","className","frozenData","width","height","getRowHeight","headerWidth","useIsScrolling","onScroll","hoveredRowKey","overscanRowCount","style","onScrollbarPresenceChange","rest","headerHeight","_getHeaderHeight","frozenRowCount","frozenRowsHeight","cls","containerProps","Grid","VariableSizeGrid","FixedSizeGrid","Math","max","undefined","min","headerRenderer","ref","rowKey","Array","isArray","reduce","sum","overscanRowStartIndex","overscanRowStopIndex","visibleRowStartIndex","visibleRowStopIndex","onRowsRendered","overscanStartIndex","overscanStopIndex","startIndex","stopIndex","React","PureComponent","propTypes","PropTypes","object","string","number","isRequired","oneOfType","arrayOf","func","array","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport { FixedSizeGrid, VariableSizeGrid } from 'react-window';\nimport memoize from 'memoize-one';\n\nimport Header from './TableHeader';\nimport { getEstimatedTotalRowsHeight } from './utils';\n\n/**\n * A wrapper of the Grid for internal only\n */\nclass GridTable extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this._setHeaderRef = this._setHeaderRef.bind(this);\n    this._setBodyRef = this._setBodyRef.bind(this);\n    this._setInnerRef = this._setInnerRef.bind(this);\n    this._itemKey = this._itemKey.bind(this);\n    this._getBodyWidth = this._getBodyWidth.bind(this);\n    this._handleItemsRendered = this._handleItemsRendered.bind(this);\n    this._resetColumnWidthCache = memoize(bodyWidth => {\n      if (!this.props.estimatedRowHeight) return;\n      this.bodyRef && this.bodyRef.resetAfterColumnIndex(0, false);\n    });\n    this._getEstimatedTotalRowsHeight = memoize(getEstimatedTotalRowsHeight);\n\n    this.renderRow = this.renderRow.bind(this);\n  }\n\n  resetAfterRowIndex(rowIndex = 0, shouldForceUpdate) {\n    if (!this.props.estimatedRowHeight) return;\n    this.bodyRef && this.bodyRef.resetAfterRowIndex(rowIndex, shouldForceUpdate);\n  }\n\n  forceUpdateTable() {\n    this.headerRef && this.headerRef.forceUpdate();\n    this.bodyRef && this.bodyRef.forceUpdate();\n  }\n\n  scrollToPosition(args) {\n    this.headerRef && this.headerRef.scrollTo(args.scrollLeft);\n    this.bodyRef && this.bodyRef.scrollTo(args);\n  }\n\n  scrollToTop(scrollTop) {\n    this.bodyRef && this.bodyRef.scrollTo({ scrollTop });\n  }\n\n  scrollToLeft(scrollLeft) {\n    this.headerRef && this.headerRef.scrollTo(scrollLeft);\n    this.bodyRef && this.bodyRef.scrollToPosition({ scrollLeft });\n  }\n\n  scrollToRow(rowIndex = 0, align = 'auto') {\n    this.bodyRef && this.bodyRef.scrollToItem({ rowIndex, align });\n  }\n\n  getTotalRowsHeight() {\n    const { data, rowHeight, estimatedRowHeight } = this.props;\n\n    if (estimatedRowHeight) {\n      return (\n        (this.innerRef && this.innerRef.clientHeight) || this._getEstimatedTotalRowsHeight(data, estimatedRowHeight)\n      );\n    }\n    return data.length * rowHeight;\n  }\n\n  renderRow(args) {\n    const { data, columns, rowRenderer } = this.props;\n    const rowData = data[args.rowIndex];\n    return rowRenderer({ ...args, columns, rowData });\n  }\n\n  render() {\n    const {\n      containerStyle,\n      classPrefix,\n      className,\n      data,\n      frozenData,\n      width,\n      height,\n      rowHeight,\n      estimatedRowHeight,\n      getRowHeight,\n      headerWidth,\n      bodyWidth,\n      useIsScrolling,\n      onScroll,\n      hoveredRowKey,\n      overscanRowCount,\n      // omit from rest\n      style,\n      onScrollbarPresenceChange,\n      ...rest\n    } = this.props;\n    const headerHeight = this._getHeaderHeight();\n    const frozenRowCount = frozenData.length;\n    const frozenRowsHeight = rowHeight * frozenRowCount;\n    const cls = cn(`${classPrefix}__table`, className);\n    const containerProps = containerStyle ? { style: containerStyle } : null;\n    const Grid = estimatedRowHeight ? VariableSizeGrid : FixedSizeGrid;\n\n    this._resetColumnWidthCache(bodyWidth);\n    return (\n      <div role=\"table\" className={cls} {...containerProps}>\n        <Grid\n          {...rest}\n          className={`${classPrefix}__body`}\n          ref={this._setBodyRef}\n          innerRef={this._setInnerRef}\n          itemKey={this._itemKey}\n          data={data}\n          frozenData={frozenData}\n          width={width}\n          height={Math.max(height - headerHeight - frozenRowsHeight, 0)}\n          rowHeight={estimatedRowHeight ? getRowHeight : rowHeight}\n          estimatedRowHeight={typeof estimatedRowHeight === 'function' ? undefined : estimatedRowHeight}\n          rowCount={data.length}\n          overscanRowCount={overscanRowCount}\n          columnWidth={estimatedRowHeight ? this._getBodyWidth : bodyWidth}\n          columnCount={1}\n          overscanColumnCount={0}\n          useIsScrolling={useIsScrolling}\n          hoveredRowKey={hoveredRowKey}\n          onScroll={onScroll}\n          onItemsRendered={this._handleItemsRendered}\n          children={this.renderRow}\n        />\n        {headerHeight + frozenRowsHeight > 0 && (\n          // put header after body and reverse the display order via css\n          // to prevent header's shadow being covered by body\n          <Header\n            {...rest}\n            className={`${classPrefix}__header`}\n            ref={this._setHeaderRef}\n            data={data}\n            frozenData={frozenData}\n            width={width}\n            height={Math.min(headerHeight + frozenRowsHeight, height)}\n            rowWidth={headerWidth}\n            rowHeight={rowHeight}\n            headerHeight={this.props.headerHeight}\n            headerRenderer={this.props.headerRenderer}\n            rowRenderer={this.props.rowRenderer}\n            hoveredRowKey={frozenRowCount > 0 ? hoveredRowKey : null}\n          />\n        )}\n      </div>\n    );\n  }\n\n  _setHeaderRef(ref) {\n    this.headerRef = ref;\n  }\n\n  _setBodyRef(ref) {\n    this.bodyRef = ref;\n  }\n\n  _setInnerRef(ref) {\n    this.innerRef = ref;\n  }\n\n  _itemKey({ rowIndex }) {\n    const { data, rowKey } = this.props;\n    return data[rowIndex][rowKey];\n  }\n\n  _getHeaderHeight() {\n    const { headerHeight } = this.props;\n    if (Array.isArray(headerHeight)) {\n      return headerHeight.reduce((sum, height) => sum + height, 0);\n    }\n    return headerHeight;\n  }\n\n  _getBodyWidth() {\n    return this.props.bodyWidth;\n  }\n\n  _handleItemsRendered({ overscanRowStartIndex, overscanRowStopIndex, visibleRowStartIndex, visibleRowStopIndex }) {\n    this.props.onRowsRendered({\n      overscanStartIndex: overscanRowStartIndex,\n      overscanStopIndex: overscanRowStopIndex,\n      startIndex: visibleRowStartIndex,\n      stopIndex: visibleRowStopIndex,\n    });\n  }\n}\n\nGridTable.propTypes = {\n  containerStyle: PropTypes.object,\n  classPrefix: PropTypes.string,\n  className: PropTypes.string,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  headerHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]).isRequired,\n  headerWidth: PropTypes.number.isRequired,\n  bodyWidth: PropTypes.number.isRequired,\n  rowHeight: PropTypes.number.isRequired,\n  estimatedRowHeight: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),\n  getRowHeight: PropTypes.func,\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  data: PropTypes.array.isRequired,\n  frozenData: PropTypes.array,\n  rowKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  useIsScrolling: PropTypes.bool,\n  overscanRowCount: PropTypes.number,\n  hoveredRowKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  style: PropTypes.object,\n  onScrollbarPresenceChange: PropTypes.func,\n  onScroll: PropTypes.func,\n  onRowsRendered: PropTypes.func,\n  headerRenderer: PropTypes.func.isRequired,\n  rowRenderer: PropTypes.func.isRequired,\n};\n\nexport default GridTable;\n"],"file":"GridTable.js"}